When would you want to use a remote repository rather than keeping all your work local?
Working remotely allows for working in the cloud, collaboration, and sharing with others.

Why might you want to always pull changes manually rather than having Git automatically stay up-to-date with your remote repository?
Pulling manually ensures that collaboration can work more smoothly,
and allows you to effectively use the remote repository as a back-up
in case you wish to experiment locally without fear of damaging
any code that others are viewing or using.

Describe the differences between forks, clones, and branches. When would you use one instead of another?
Branches allow for development of the same program in different sections
that can then be merged together and traced back for bug hunting. Clones
allow alternate versions to be moved around, so that entire projects can
be shared, distributed or collaborated upon. And forks do the same, for
GitHub users, but retain connection to the original creator.

What is the benefit of having a copy of the last known state of the remote stored locally?
It allows potential conflicts to be investigated and resolved,
and allows for a fall-back if a bug has been introduced.

How would you collaborate without using Git or GitHub? What would be easier, and what would be harder?
Sharing a drive and working simultaneously in it might be faster
but would lose traceability and versioning. Collaborating on a scale
is far easier with GitHub.

When would you want to make changes in a separate branch rather than directly in master? What benefits does each approach have?
Changes in a different branch make sense when delegating features that do not
conflict with ongoing master development, where merges can be largely automatic
or when creating alternate versions or master, where it is helpful to be able
to change both versions separately. Working directly in master, however, offers
far more simplicity and ease, while branching quickly becomes complex and can
become unwieldy.
