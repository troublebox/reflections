Initializing a repository creates the hidden .git file
It does not make commits
It may be important to mark the first commit with a message
And so it must be done manually

A staging area is different from the working directory and repository
in that it is a temporary placeholder to which files can be added
without committing changes. It allows for a working area where decisions
about commits can be made and unmade without penalty.

Use the staging area to track what changes have been made
so that each command can be assigned to a logical change.
Powerful diff tools help to keep track of what each commit
will include.

Branches are helpful when experimenting, creating alternate versions,
or doing work where the integrity of the original code should be maintained

Diagrams help to keep track of the structure of individual branches of code
so that it is easy to identify branches, what code belongs to each of them
and to maintain a sense of overview of branch history.

Merging two branches combines the code that has been worked on into
one working file. This is a great way to delegate coding to different people
since their separate work can be combined elegantly without each stepping
on each other's toes. It also allows for experimentation, as new features
can be added into a main program, without stopping its development while
it is under construction. We show this by combining branches, and giving it
the master label, to show that the parents of each branch head is included
in the merged history.

The advantages of always resolving conflicts manually ensures that
changes are not lost, and that code is developed meaningfully.
Automatic merge is a powerful tool when no conflicting code exists,
but Git cannot evaluate conflicts very well.
